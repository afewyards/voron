#####################################################################
# 	Macros
#####################################################################

[gcode_macro PRINT_START]
gcode:
  {% if printer.toolhead.homed_axes == "xyz" %}
    G90
  {% else %}
    RESPOND TYPE=echo MSG="Homing"
    G28
  {% endif %}
  G90
  RESPOND TYPE=echo MSG="Parking nozzle on z-stop"
  G0 Z10 X181.5 Y249.5 F5000
  G0 Z1 F1000
  M83
  M140 S{params.BED}
  #HEAT_CHAMBER TARGET={params.CHAMBER}
  M104 S{params.EXTRUDER}
  M190 S{params.BED}
  M109 S{params.EXTRUDER}

  #SET_GCODE_OFFSET Z=0.065
  #SET_GCODE_OFFSET Z=0.07
  SET_GCODE_OFFSET Z_ADJUST={params.OFFSET}
  
  QUAD_GANTRY_LEVEL
  BED_MESH_CALIBRATE
  
  M190 S{params.BED}
  M109 S{params.EXTRUDER}

  SQUIGGLY_PURGE
  M221 S100
  M107
  G21 ; set units to millimeters
  G90 ; use absolute coordinates
  M83 ; use relative distances for extrusion

   
[gcode_macro PRINT_END]
gcode:
  M400                           ; wait for buffer to clear
  G92 E0                         ; zero the extruder
  
  G91                            ; relative positioning
  G0 Z10.00 F14000
  G1 E-4.0 F4000                 ; retract filament
  G90                            ; absolute positioning
  
  G1 X125 Y255 F3600             ; park nozzle at rear
  TURN_OFF_HEATERS
  M107                           ; turn off fan


[gcode_macro HEAT_CHAMBER]
description: Heatsoak chamber to a specific temperature with a timeout
gcode:
    {% set SETPOINT_TEMP = params.TARGET|default(0)|float %}
    {% set MAXTIME = params.MAXTIME|default(15)|int %}

    SET_HEATER_TEMPERATURE HEATER=chamber TARGET={SETPOINT_TEMP}
    # {% set V = printer["gcode_macro _USER_VARIABLES"].verbose %}

    {% for _ in range(1, MAXTIME) %}
        _WAIT_CHAMBER_TEMP TEMP={SETPOINT_TEMP}
    {% endfor %}
    {% if V %}
        RESPOND MSG="Chamber temperature OK !"
    {% endif %}


[gcode_macro _WAIT_CHAMBER_TEMP]
# This macro is needed to allow klipper populate a new value in the printer[...].temperature variable
# as each variables are populated only once at the beginning of every macro call
gcode:
    {% set SETPOINT_TEMP = params.TEMP|default(0)|float %}
    {% set CURRENT_TEMP = printer["heater_generic chamber"].temperature|float %}

    {% if CURRENT_TEMP <= SETPOINT_TEMP %}
        RESPOND MSG="Heating up the chamber : {CURRENT_TEMP}/{SETPOINT_TEMP}"
        G4 P{60000 * 1} # wait a minute and check again if called in a loop
    {% endif %}
    

[gcode_macro SPEED_TEST]
gcode:
  {% set SPEED = params.SPEED|default(100)|float %}
  {% set PADDING = params.PADDING|default(10)|float %}
  
  {% set FEEDRATE_MAX = SPEED * 60 %}
  {% set FEEDRATE_MIN = FEEDRATE_MAX / 2 %}

  {% set X_MAX = printer.configfile.settings.stepper_x.position_max - PADDING %}
  {% set Y_MAX = printer.configfile.settings.stepper_y.position_max - PADDING %}
  {% set Z_POS = printer.configfile.settings.stepper_z.position_max / 2 %}

  SET_DISPLAY_TEXT MSG="Speed test {SPEED}mm/s"
  RESPOND TYPE=echo MSG="Testing speed up to {SPEED}mm/s"
  SET_VELOCITY_LIMIT VELOCITY={SPEED}

  {% if "z" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
  G90
  G1 X{PADDING} Y{PADDING} Z{Z_POS} F10000
  

  {% for percentage in [0.5,0.6,0.7,0.8,0.9,1] %}
    {% set FEEDRATE = FEEDRATE_MAX * percentage %}
    RESPOND TYPE=echo MSG="Speed: {FEEDRATE / 60}mm/s F{FEEDRATE}"
    
    G1 X{PADDING} Y{PADDING} F{FEEDRATE}
    G1 X{X_MAX} Y{Y_MAX} F{FEEDRATE}
    G1 X{PADDING} Y{PADDING} F{FEEDRATE}
    G1 X{X_MAX} Y{Y_MAX} F{FEEDRATE}
    
    G1 X{PADDING} Y{Y_MAX} F{FEEDRATE}
    
    G1 X{X_MAX} Y{PADDING} F{FEEDRATE}
    G1 X{PADDING} Y{Y_MAX} F{FEEDRATE}
    G1 X{X_MAX} Y{PADDING} F{FEEDRATE}
    G1 X{PADDING} Y{Y_MAX} F{FEEDRATE}
  {% endfor %}

  G1 X{PADDING} Y{PADDING} Z{Z_POS} F10000
  RESPOND TYPE=echo MSG="Speed test completed"
  SET_VELOCITY_LIMIT VELOCITY={printer.toolhead.max_velocity}


[gcode_macro PUSH]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

